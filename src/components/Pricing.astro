---
import { useTranslations, type Locale } from '../i18n/utils';

interface Props {
	locale: Locale;
}

const { locale } = Astro.props;
const t = useTranslations(locale);

const tiers = [
	{
		name: t.pricing.tiers.free.name,
		id: 'tier-free',
		href: 'https://checkout.freemius.com/plugin/20957/plan/34943/',
		price: { monthly: '$0', annually: '$0' },
		description: t.pricing.tiers.free.description,
		features: t.pricing.tiers.free.features,
		featured: false,
	},
	{
		name: t.pricing.tiers.business.name,
		id: 'tier-business',
		href: 'https://checkout.freemius.com/plugin/20957/plan/34944/licenses/1/',
		price: { monthly: '$149.99', annually: '$1,449' },
		description: t.pricing.tiers.business.description,
		features: t.pricing.tiers.business.features,
		featured: true,
	},
	{
		name: t.pricing.tiers.enterprise.name,
		id: 'tier-enterprise',
		href: 'https://checkout.freemius.com/plugin/20957/plan/34945/licenses/1/',
		price: { monthly: '$449', annually: '$4,300' },
		description: t.pricing.tiers.enterprise.description,
		features: t.pricing.tiers.enterprise.features,
		featured: false,
	},
];
---

<div class="bg-white py-24 sm:py-32">
	<div class="mx-auto max-w-7xl px-6 lg:px-8">
		<div class="mx-auto max-w-4xl text-center">
			<h2 class="text-base/7 font-semibold text-indigo-600">{t.pricing.heading}</h2>
			<p class="mt-2 text-5xl font-semibold tracking-tight text-balance text-gray-900 sm:text-6xl">
				{t.pricing.title}
			</p>
		</div>
		<p class="mx-auto mt-6 max-w-2xl text-center text-lg font-medium text-pretty text-gray-600 sm:text-xl/8">
			{t.pricing.description}
		</p>
		<div class="mt-16 flex justify-center">
			<fieldset aria-label={t.pricing.frequency.monthly}>
				<div class="grid grid-cols-2 gap-x-1 rounded-full p-1 text-center text-xs/5 font-semibold inset-ring inset-ring-gray-200">
					<label class="group relative rounded-full px-2.5 py-1 has-checked:bg-indigo-600">
						<input
							value="monthly"
							checked
							name="frequency"
							type="radio"
							class="absolute inset-0 appearance-none rounded-full"
						/>
						<span class="text-gray-500 group-has-checked:text-white">{t.pricing.frequency.monthly}</span>
					</label>
					<label class="group relative rounded-full px-2.5 py-1 has-checked:bg-indigo-600">
						<input
							value="annually"
							name="frequency"
							type="radio"
							class="absolute inset-0 appearance-none rounded-full"
						/>
						<span class="text-gray-500 group-has-checked:text-white">{t.pricing.frequency.annually}</span>
					</label>
				</div>
			</fieldset>
		</div>
		<div id="pricing-tiers" class="isolate mx-auto mt-10 grid max-w-md grid-cols-1 gap-8 lg:max-w-4xl lg:grid-cols-3 xl:mx-0 xl:max-w-none">
			{tiers.map((tier) => (
				<div
					data-featured={tier.featured ? 'true' : undefined}
					class="rounded-3xl p-8 ring-1 ring-gray-200 data-featured:ring-2 data-featured:ring-indigo-600"
				>
					<div class="flex items-center justify-between gap-x-4">
						<h3
							id={tier.id}
							class="text-lg/8 font-semibold text-gray-900 data-featured:text-indigo-600"
							data-featured={tier.featured ? 'true' : undefined}
						>
							{tier.name}
						</h3>
						{tier.featured && (
							<p class="rounded-full bg-indigo-600/10 px-2.5 py-1 text-xs/5 font-semibold text-indigo-600">
								{t.pricing.mostPopular}
							</p>
						)}
					</div>
					<p class="mt-4 text-sm/6 text-gray-600">{tier.description}</p>
					<p class="tier-price-monthly mt-6 flex items-baseline gap-x-1">
						<span class="text-4xl font-semibold tracking-tight text-gray-900">{tier.price.monthly}</span>
						{tier.price.monthly !== '$0' && (
							<span class="text-sm/6 font-semibold text-gray-600">{t.pricing.perMonth}</span>
						)}
					</p>
					<p class="tier-price-annually mt-6 hidden flex items-baseline gap-x-1">
						<span class="text-4xl font-semibold tracking-tight text-gray-900">{tier.price.annually}</span>
						{tier.price.annually !== '$0' && (
							<span class="text-sm/6 font-semibold text-gray-600">{t.pricing.perYear}</span>
						)}
					</p>
					<a
						href={tier.href}
						aria-describedby={tier.id}
						data-tier-name={tier.name}
						data-tier-id={tier.id}
						data-tier-price-monthly={tier.price.monthly}
						data-tier-price-annually={tier.price.annually}
						class="tier-cta-link mt-6 block w-full rounded-md px-3 py-2 text-center text-sm/6 font-semibold text-indigo-600 inset-ring-1 inset-ring-indigo-200 hover:inset-ring-indigo-300 focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-indigo-600"
						class:list={[
							tier.featured && 'bg-indigo-600 text-white shadow-xs inset-ring-0 hover:bg-indigo-500'
						]}
					>
						{tier.price.monthly === '$0' ? t.pricing.getFreeStart : t.pricing.choosePlan}
					</a>
					<ul role="list" class="mt-8 space-y-3 text-sm/6 text-gray-600">
						{tier.features.map((feature) => (
							<li class="flex gap-x-3">
								<svg class="h-6 w-5 flex-none text-indigo-600" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor" aria-hidden="true">
									<path stroke-linecap="round" stroke-linejoin="round" d="m4.5 12.75 6 6 9-13.5" />
								</svg>
								{feature}
							</li>
						))}
					</ul>
				</div>
			))}
		</div>
	</div>
</div>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Monthly/Annually toggle
		const frequencyInputs = document.querySelectorAll('input[name="frequency"]');
		const monthlyPrices = document.querySelectorAll('.tier-price-monthly');
		const annuallyPrices = document.querySelectorAll('.tier-price-annually');

		let currentFrequency = 'monthly'; // Track current frequency

		frequencyInputs.forEach((input) => {
			input.addEventListener('change', (e) => {
				const target = e.target as HTMLInputElement;
				currentFrequency = target.value;
				if (target.value === 'monthly') {
					monthlyPrices.forEach((el) => el.classList.remove('hidden'));
					annuallyPrices.forEach((el) => el.classList.add('hidden'));
				} else {
					monthlyPrices.forEach((el) => el.classList.add('hidden'));
					annuallyPrices.forEach((el) => el.classList.remove('hidden'));
				}
			});
		});

		// ═══════════════════════════════════════════════════════════════
		// CONVERSION TRACKING: Plan Click Events
		// ═══════════════════════════════════════════════════════════════
		const tierLinks = document.querySelectorAll('.tier-cta-link');

		tierLinks.forEach((link) => {
			link.addEventListener('click', (e) => {
				const target = e.currentTarget as HTMLAnchorElement;

				// Extract tier data from data attributes
				const tierName = target.dataset.tierName || 'Unknown';
				const tierId = target.dataset.tierId || 'unknown';
				const priceMonthly = target.dataset.tierPriceMonthly || '0';
				const priceAnnually = target.dataset.tierPriceAnnually || '0';
				const checkoutUrl = target.href;

				// Determine which price to use based on current frequency
				const selectedPrice = currentFrequency === 'monthly' ? priceMonthly : priceAnnually;
				const selectedBillingCycle = currentFrequency;

				// Push event to dataLayer for GTM
				window.dataLayer = window.dataLayer || [];
				window.dataLayer.push({
					'event': 'plan_click',
					'plan_name': tierName,
					'plan_id': tierId,
					'plan_price': selectedPrice,
					'billing_cycle': selectedBillingCycle,
					'checkout_url': checkoutUrl,
					'event_category': 'Pricing',
					'event_action': 'Plan Click',
					'event_label': `${tierName} - ${selectedBillingCycle}`
				});

				// Log to console for debugging (remove in production if desired)
				console.log('🎯 Plan Click Tracked:', {
					tierName,
					selectedPrice,
					selectedBillingCycle,
					checkoutUrl
				});

				// Note: Link will proceed normally (no e.preventDefault())
			});
		});
	});
</script>
